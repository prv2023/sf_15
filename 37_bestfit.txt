def bestfit(mb,processes):
      #mb is the memory block
    #processes is the list of processes
    #returns a list of tuples with the process id and the memory block id
    #if no memory block is available, returns an empty list
    alloc = [-1] * len(processes)  #-1 means nothing has been assigned yet, like a placeholder

    for i in range (len(processes)):
        best_block=-1

        for j in range (len(mb)):
            
            if processes[i]<=mb[j]:
                if best_block==-1 or mb[j]<mb[best_block]:   #-1 means no memory block has been selected yet
                    best_block=j
                   

        if best_block!=-1: 
            alloc[i]= best_block
            mb[best_block] -= processes[i]    #reflect in the allocation, reduces size

    return alloc


memory = []
process = []

# memory_input=input("Enter the number of memory block (separated by spaces):  ")
# memory = list(map(int,memory_input.split()))

# process_input=input("Enter the number of processes (separated by spaces):")
# process=list(map(int,process_input.split()))

memory_count = int(input("Enter the number of memory blocks: "))
for i in range(memory_count):
    memory_size = int(input(f"Enter the size of memory block {i+1}: "))   #f string
    memory.append(memory_size)   #add the size of memory to the end of the respective list

process_count = int(input("Enter the number of processes: "))
for i in range(process_count):
    process_size = int(input(f"Enter the size of process {i+1}: "))
    process.append(process_size)

allocation= bestfit(memory,process)

print("Best fit : ",allocation)
